CS471
Luiz Cruz
Kevin Briggs

Project 3

High level design
  The design of this program uses socket connections in order to send information
  from clients to a server and vice versa. The server forks a new child for every
  incoming connection. Each of these children receives and messages to its
  corresponding client. The server is an actution server, with one client and up
  to 6 buyers connected. The seller can put items up for sale and the buyers can
  bid on those items.

  ==== Pipes ====

  We used pipes for inter-process communication. These set up a buffer of shared
  memory between different forked processes. All forked processes have two file
  descriptors that point to the read and write end of the pipe, by writing to
  and reading from the pipes we were able to share information with different
  forked processes. We used pipes in order to share the items that were up for
  aution. The pipe worked as a FIFO so as we read from the buffer we would link
  the items together forming a linked list of the items. Once we read the buffer
  since it was a FIFO we wrote the updated linked list back into it for the next
  read.

  ==== Forks ====

  We used forks in order to service multiple clients on the same server. The
  parent waits for requests and the children each service its own client. We
  also forked the clients into a child and parent so that one process could
  continuously receive messages from the server and the other would handle
  the user interface.

  ==== Sockets ====

  We used sockets for communication between the server and clients. The clients
  requested information and the server send the a response message back.

  ==== Semaphore ===

  We used semaphores in order to make sure there were no race conditions while
  reading or writing to the pipe. We used a semaphore as a mutex that woudl lock
  when we started to read the buffer, and only unlock once we wrote the values
  back in to the buffer. We also used a semaphore to communicate to a seperate
  process that a message needed to be sent such as the case of a buyer
  outbidding another.

  ==== Extra Credit ====

  We were able to get the outbid message to show up on the buyer instantly, we
  achieved this by initializing a semaphore to 0. We posted it when we detected
  that someone had outbid someone else. Within the while loop that waited to
  receive input we're also doing a trylock, so once someone posts the semaphore
  the other processes know that someone has been outbid they each go into the
  locked code and check if they were the ones who were outbid if they were not
  they post the semaphore again to allow another process to check if it was
  outbid. If the process sees it was outbid it sends the message to its client
  and doesn't post the semaphore back. We unfortunately forgot about sending
  the you have won an item message, but had we remembered it we would've
  implemented it in the same way.
